---
- name: Ensure containerd directories exists
  file:
    state: directory
    path: "{{ item.dir }}"
    mode: "{{ item.mode }}"
  with_items:
    - dir: "{{ containerd_data_root }}"
      mode: "0711"
    - dir: /etc/containerd
      mode: "0700"

- name: Check if containerd config exists
  stat:
    path: /etc/containerd/config.toml
  register: containerd_config

- name: Check if containerd is properly configured
  command: 'egrep -v "^$|^#|^disabled_plugins" /etc/containerd/config.toml'
  register: containerd_config_lines
  when: containerd_config.stat.exists
  failed_when: false
  changed_when: false

- name: Configure containerd
  shell: "containerd config default > /etc/containerd/config.toml"
  when: not containerd_config.stat.exists or containerd_config_lines.stdout_lines | length == 0
  notify: restart_containerd

- name: Configure containerd data root
  lineinfile:
    regexp: "^root *=.*"
    line: 'root = "{{ containerd_data_root }}"'
    path: /etc/containerd/config.toml

- name: Configure docker.io mirror
  lineinfile:
    regexp: "^ * endpoint *=.*"
    line: '          endpoint = {{ dockerio_endpoint | to_json }}'
    insertafter: '^ *\[plugins."io.containerd.grpc.v1.cri".registry.mirrors."docker.io"\]'
    path: /etc/containerd/config.toml
  vars:
    dockerio_endpoint: "{{ containerd_registry_mirrors | json_query('[?name==`docker.io`].endpoint[]') }}"
  when: containerd_registry_mirrors is defined and containerd_registry_mirrors | length > 0

- name: Configure cri plugin section
  lineinfile:
    line: "{{ item.line | indent(item.indent, true) }}"
    regexp: '^ *\[{{ item.line }}\]'
    insertafter: '^ *\[{{ item.parent }}\]'
    path: /etc/containerd/config.toml
  with_items:
    - line: '[plugins."io.containerd.grpc.v1.cri"]'
      parent: 'plugins'
      indent: 2
    - line: '[plugins."io.containerd.grpc.v1.cri".cni]'
      parent: 'plugins."io.containerd.grpc.v1.cri"'
      indent: 4

- name: Configure CNI parameters
  lineinfile:
    line: '      {{ item.name }} = "{{ item.value }}"'
    regexp: '^ +{{ item.name }} *= *'
    insertafter: '^ *\[plugins."io.containerd.grpc.v1.cri".cni\]'
    path: /etc/containerd/config.toml
  with_items:
    - name: bin_dir
      value: "{{ containerd_cni_bin_dir }}"
    - name: conf_dir
      value: "{{ containerd_cni_conf_dir }}"

- block:
  - name: Configure cri plugin registry section
    lineinfile:
      line: "{{ item.line | indent(item.indent, true) }}"
      regexp: '^ *\[{{ item.line }}\]'
      insertafter: '^ *\[{{ item.parent }}\]'
      path: /etc/containerd/config.toml
    with_items:
      - line: '[plugins."io.containerd.grpc.v1.cri".registry]'
        parent: 'plugins."io.containerd.grpc.v1.cri"'
        indent: 4
      - line: '[plugins."io.containerd.grpc.v1.cri".registry.mirrors]'
        parent: 'plugins."io.containerd.grpc.v1.cri".registry'
        indent: 6

  - name: Configure registry mirrors
    blockinfile:
      marker: "# {mark} ANSIBLE MANAGED MIRRORS"
      insertafter: '^ *\[plugins."io.containerd.grpc.v1.cri".registry.mirrors\]'
      block: '{{ lookup("template", role_path + "/templates/registry_mirrors.toml.j2") }}'
      path: /etc/containerd/config.toml
    notify: restart_containerd

  - name: Configure cri plugin registry config section
    lineinfile:
      line: '      [plugins."io.containerd.grpc.v1.cri".registry.configs]'
      regexp: '^ *\[plugins."io.containerd.grpc.v1.cri".registry.configs\]'
      insertafter: '^ *\[plugins."io.containerd.grpc.v1.cri".registry\]'
      path: /etc/containerd/config.toml

  when: containerd_registry_mirrors is defined and containerd_registry_mirrors | length > 0

- name: Configure registry parameters
  blockinfile:
    marker: "# {mark} ANSIBLE MANAGED REGISTRY CONFIG"
    insertafter: '^ *\[plugins."io.containerd.grpc.v1.cri".registry.configs\]'
    block: '{{ lookup("template", role_path + "/templates/registry_config.toml.j2") }}'
    path: /etc/containerd/config.toml
  notify: restart_containerd
  when: containerd_registry_configs is defined and containerd_registry_configs | length > 0


# https://kubernetes.io/docs/setup/production-environment/container-runtimes/#containerd-systemd
# sudo grep SystemdCgroup -B 3 /etc/containerd/config.toml
- name: Use systemd cgroup driver
  lineinfile:
    line: "{{ item.line | indent(item.indent, true) }}"
    regexp: '^ *{{ item.line }}'
    insertafter: '^ *\[{{ item.parent }}\]'
    path: /etc/containerd/config.toml
  with_items:
    - line: 'SystemdCgroup = true'
      parent: 'plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options'
      indent: 12
  notify:
    - restart_containerd
  # lineinfile:
  #   path: /etc/containerd/config.toml
  #   regexp: '^SystemdCgroup = true'
  #   insertafter: '^\s+\[plugins\."io\.containerd\.grpc\.v1\.cri"\.containerd\.runtimes\.runc\.options\]'
  #   line: "            SystemdCgroup = true"
  # notify:
  #   - restart_containerd

# sudo cat /etc/containerd/config.toml
- name: Ensure enabled CRI plugin
  replace:
    path:  /etc/containerd/config.toml
    regexp: 'disabled_plugins = \["cri"\]'
    replace: '#disabled_plugins = ["cri"]'
  notify:
    - restart_containerd

# ----- nvidia_driver installed

- name: Gather the package facts
  package_facts:
    manager: auto

- set_fact:
    nvidia_device: "{{ nvidia_package_name in ansible_facts.packages }}"

- debug:
    var: nvidia_device
    verbosity: 1

- name: Configure NVIDIA runtime
  block:
    - name: Add containerd.runtimes.nvidia
      blockinfile:
        path: /etc/containerd/config.toml
        marker: "# {mark} ANSIBLE RUNTIME NVIDIA"
        insertbefore: '^ *\[plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options\]'
        block: '{{ lookup("template", role_path + "/templates/nvidia_config.toml.j2") }}'
      notify: restart_containerd

    - name: Set default_runtime_name - nvidia
      replace:
        path:  /etc/containerd/config.toml
        regexp: 'default_runtime_name = \"runc\"'
        replace: 'default_runtime_name = "nvidia"'
        backup: yes
      notify:
        - restart_containerd
  when: nvidia_device

# ----- nvidia_driver installed


# sudo wget https://raw.githubusercontent.com/urfave/cli/master/autocomplete/bash_autocomplete -O /etc/bash_completion.d/ctr
- name: Enable autocompletion
  get_url:
    url: "https://raw.githubusercontent.com/urfave/cli/master/autocomplete/bash_autocomplete"
    dest: "/etc/bash_completion.d/ctr"
    mode: 0644

- meta: flush_handlers
